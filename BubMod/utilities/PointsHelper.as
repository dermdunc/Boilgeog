package BubMod.utilities {	import BubMod.model.*;	import BubMod.view.components.*;		public class PointsHelper {		//function which creates a random 3D object		public static function createRandomObject(width:Number,height:Number,depth:Number):SpaceObject{			var xRandom:Number = (Math.floor(Math.random()*2)==0)?1:-1;			var x:Number = Math.floor(Math.random()*width) * xRandom;						var yRandom:Number = (Math.floor(Math.random()*2)==0)?1:-1;			var y:Number = Math.floor(Math.random()*height) * yRandom;						var zRandom:Number = (Math.floor(Math.random()*2)==0)?1:-1;			var z:Number = Math.floor(Math.random()*depth) * zRandom;						var tx:Number = Math.floor(Math.random()*360);			var ty:Number = Math.floor(Math.random()*360);			var tz:Number = Math.floor(Math.random()*360);						var spaceObject:SpaceObject = new SpaceObject(x,y,z,tx,ty,tz);			return spaceObject;		}				public static function make3DPoint(x,y,z):Object {		//make3DPoint = function(x,y,z){			var point = new Object();			point.x = x;			point.y = y;			point.z = z;			return point;		}				public static function make2DPoint(x,y, depth, scaleFactor):Object {		//make2DPoint = function(x,y, depth, scaleFactor){			var point = new Object();			point.x = x;			point.y = y;			point.depth = depth;			point.scaleFactor = scaleFactor;			return point;		}				public static function Transform3DPointsTo2DPoints(axisRotations, points):Array {						var TransformedPointsArray = [];			var sx = Math.sin(axisRotations.x);			var cx = Math.cos(axisRotations.x);			var sy = Math.sin(axisRotations.y);			var cy = Math.cos(axisRotations.y);			var sz = Math.sin(axisRotations.z);			var cz = Math.cos(axisRotations.z);			var x,y,z, xy,xz, yx,yz, zx,zy, scaleFactor;					var i = points.length;			while (i--){				x = points[i].x;				y = points[i].y;				z = points[i].z;						// rotation around x				xy = cx*y - sx*z;				xz = sx*y + cx*z;				// rotation around y				yz = cy*xz - sy*x;				yx = sy*xz + cy*x;				// rotation around z				zx = cz*yx - sz*xy;				zy = sz*yx + cz*xy;								scaleFactor = 1200/(1200 + yz);				x = zx*scaleFactor;				y = zy*scaleFactor;				z = yz;						TransformedPointsArray[i] = PointsHelper.make2DPoint(x, y, -z, scaleFactor);			}			return TransformedPointsArray;		}	}	}