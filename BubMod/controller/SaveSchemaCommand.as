package BubMod.controller {	import org.puremvc.as3.interfaces.ICommand;    import org.puremvc.as3.interfaces.INotification;    import org.puremvc.as3.patterns.command.SimpleCommand;	import BubMod.model.*;	import BubMod.utilities.*;	import BubMod.view.components.*;	import flash.geom.*;	import flash.xml.*;	import flash.events.*;	import flash.net.*;		public class SaveSchemaCommand extends SimpleCommand implements ICommand {		private var schemaDataProxy:SchemaDataProxy;		private var entityDataProxy:EntityDataProxy;		private var schemaId:Number;		private var numOfEntities:int = 0;		private var numOfAttributes:int = 0;		private var errorMsg:String = "";		private var errorOccurred:Boolean = false;					override public function execute(note:INotification):void { 			//Retrieve the schemaId from the 			schemaId = note.getBody() as Number;			//Reset the error variables			errorMsg = "";			errorOccurred = false;						//Retrieve the required proxys			schemaDataProxy = facade.retrieveProxy( SchemaDataProxy.NAME ) as SchemaDataProxy;			entityDataProxy = facade.retrieveProxy( EntityDataProxy.NAME ) as EntityDataProxy;						//Create the schema variables required to save the schema			var schemaVariables:URLVariables = new URLVariables();//("schemaId=0&schemaName=test"); 			schemaVariables.schemaId = schemaId;			schemaVariables.schemaName = schemaDataProxy.getSchemaName();						saveSchema(schemaVariables);		}				private function saveSchema(schemaVariables:URLVariables) {			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/saveschema.php");			xmlURLReq.data = schemaVariables;			//xmlURLReq.contentType = "text";			xmlURLReq.method = URLRequestMethod.POST;						var xmlSendLoad:URLLoader = new URLLoader();			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			xmlSendLoad.addEventListener(Event.COMPLETE, onSchemaSaved);			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);		}				private function saveEntity(entityVariables:URLVariables) {			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/saveentity.php");			xmlURLReq.data = entityVariables;			xmlURLReq.method = URLRequestMethod.POST;						var xmlSendLoad:URLLoader = new URLLoader();			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			xmlSendLoad.addEventListener(Event.COMPLETE, onEntitySaved);			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);		}				//Function which passes an attribute object back to the server to be		//saved to the database		private function saveAttribute(attrVariables:URLVariables) {			//Create a new URL Request to access the php script on the server which			//will update the database			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/saveattribute.php");			//Add the attributes details to the request			xmlURLReq.data = attrVariables;			//Set the request type to post			xmlURLReq.method = URLRequestMethod.POST;						//Create a new URL Loader to send the request and handle the response from the server			var xmlSendLoad:URLLoader = new URLLoader();			//Let the php script know we'll be sending variables			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			//This event will let us know when the server script has finished its operation			xmlSendLoad.addEventListener(Event.COMPLETE, onAttributeSaved);			//Event used to handle any IO errors			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);		}				//Event fired once the saveSchema php script returns a value		private function onSchemaSaved(e:Event):void {			//Parse the result to a URLLoader so it can be used			var loader:URLLoader = URLLoader(e.target);			//Call a function to check if any server error occurred			if (Boolean(checkForServerErrors(loader)))			{				//If no server errors occurred we now want to update all the entities in the schema				var entitiesArray:Array = schemaDataProxy.getEntitiesArray();							//Check to make sure some entities exist				if (entitiesArray.length > 0)				{					//Set the number of entities which are going to be added or updated					//This int will be used to decide when to display a success message to the user					numOfEntities = entitiesArray.length;										//Loop through each entity and collect its name					for (var i:int =0; i < entitiesArray.length; i++){												//Check if an error has occurred on a previous server request. If						//it has then we want to break from the loop						if (errorOccurred) {							break;						}												//Create a URLVariables object to contain all the entities info						var entity:EntityMC = entitiesArray[i] as EntityMC;						var entityVariables:URLVariables = new URLVariables(); 						entityVariables.schemaId = schemaId;						entityVariables.entityName = entity.getName();						//Call the function which will send this info back to the server						saveEntity(entityVariables);						//Decrease the number of entities we are waiting to be saved before						//displaying a success message to the user						numOfEntities--;					}				}			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An unexpected error occurred. Please try saving again.");				}			}		}				private function onEntitySaved(e:Event):void {			//Parse the result to a URLLoader so it can be used			var loader:URLLoader = URLLoader(e.target);			//Call a function to check if any server error occurred			if (Boolean(checkForServerErrors(loader)))			{				//Parse the results to a URLVariables object which will make it easier to use				var variables:URLVariables = new URLVariables( loader.data );				var entityName:String = variables.entityName;								//Retrieve the specified entity				var entity:EntityMC = schemaDataProxy.getEntityByName(entityName);				//Get its attributes				var attributes:Array = entity.getAttributes();				numOfAttributes = attributes.length;				//Loop through each of the attributes, create a URLVariable,				//and send that attribute to the server to be saved				for (var j:int = 0; j < attributes.length; j++) 				{					//Check if an error has occurred on a previous server request. If					//it has then we want to break from the loop					if (errorOccurred) {						break;					}					//Create a new URL Variables object to hold the info to be sent to the server					var attrVariables:URLVariables = new URLVariables();					//Get the current attribute					var currAttribute:Attribute = attributes[j] as Attribute;					//Add the attribute details to the variable object					attrVariables.schemaId = schemaId;					attrVariables.entityId = entity.getName();					attrVariables.attributeName = currAttribute.getAttributeName(); 					//Set its primary key value					if (Boolean(currAttribute.getPrimaryKey()))					{						attrVariables.primaryKeyVal = "y";					}					else					{						attrVariables.primaryKeyVal = "n";					}											//Set its foreign key value					var foreignKey:ForeignKey = currAttribute.getForeignKey();					if (Boolean(foreignKey.getForeignKeyStatus()))					{						attrVariables.foreignKeyVal = "y";						attrVariables.foreignKeyRelatedTable = foreignKey.getRelatedTable();						attrVariables.foreignKeyRelatedKey = foreignKey.getRelatedKey();					}					else					{						attrVariables.foreignKeyVal = "n";					}					//Call the save attribute function which will send the attribute					//to the server to be saved					saveAttribute(attrVariables);					//Decrement the number of attributes which need to be saved					numOfAttributes--;				}			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An unexpected error occurred. Please try saving again.");				}			}		}				private function onAttributeSaved(e:Event):void {			//Parse the result to a URLLoader so it can be used			var loader:URLLoader = URLLoader(e.target);			//Call a function to check if any server error occurred			if (Boolean(checkForServerErrors(loader)))			{				//Check to see if this is the last attribute of the last entity to				//be saved. If it is then the save is complete and we let the user know				if (numOfEntities < 1 && numOfAttributes < 1)				{					sendNotification(ApplicationFacade.SHOW_ALERT, "Schema successfully saved");				}			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An unexpected error occurred. Please try saving again.");				}			}		}				//This function is user to check if any errors occur server side and if they		//do then it retrieves them		private function checkForServerErrors(loader:URLLoader):Boolean {			//Checks that there is some data returned from the server			if (loader.data.length > 0) {				//Cast the results to a URL Variables object. This splits them into				//their individual variables making them easier to work with				var variables:URLVariables = new URLVariables( loader.data );				//If there is no error message returned from the server then it				//operated correctly and we return true				if (variables.errorMsg == undefined)				{					return true;				}				else				{					//If an error has occurred set this to true so we don't send anymore					//requests to the server					errorOccurred = true;					//Retrieve the exact error and save it to be output to the user					errorMsg = variables.errorMsg;					return false;				}			}			//If an error has occurred set this to true so we don't send anymore			//requests to the server			errorOccurred = true;			//Stop any subsequent requests to the server			return false;		}				//Catches any IO Errors - could generally be an issue connecting with the server		private function onIOError(event:IOErrorEvent):void {			errorOccurred = true;			sendNotification(ApplicationFacade.SHOW_ALERT, "Error loading URL. Please ensure that your security settings allow scripts from compsoc.nuigalway.ie/~derm116/Boilgeog");		}	}	}