package BubMod.controller {		import flash.display.*;	import BubMod.model.*;	import BubMod.utilities.*;	import BubMod.view.*;	import BubMod.view.components.*;	import org.puremvc.as3.interfaces.ICommand;    import org.puremvc.as3.interfaces.INotification;    import org.puremvc.as3.patterns.command.SimpleCommand;		public class AddBubblesToStageCommand extends SimpleCommand implements ICommand {		        override public function execute(note:INotification):void {			//Retrieve the required proxies			var schemaDataProxy:SchemaDataProxy = facade.retrieveProxy(SchemaDataProxy.NAME) as SchemaDataProxy;			var entityDataProxy:EntityDataProxy = facade.retrieveProxy(EntityDataProxy.NAME) as EntityDataProxy;					//Check if there is any schema currently in context			var entitiesArray:Array = schemaDataProxy.getEntitiesArray();						var i:int;			//If there is a schema in context then add its bubbles to the scene						if (entitiesArray != null)			{				//Check of there is a camera specified in the entity proxy				var entityCamera:EntityCamera = entityDataProxy.getCamera();				//If not then create a new one				if (entityCamera == null)				{					entityCamera = new EntityCamera(0,0,0,0,0,0,500);				}				//Loop through each entity in the schema creating a new entity object				for (i=0; i < entitiesArray.length; i++){					//Create a new entity movieclip					var currentEntity:EntityMC = entitiesArray[i] as EntityMC					//Create a new 3D bubble and specify it as the target object for the entity movieclip					var currentBubble:Sphere = currentEntity.targetObject as Sphere;					//send the entity movieclip to the stage mediator to add to the stage					sendNotification(ApplicationFacade.STAGE_ADD_BUBBLE, currentEntity);					entityCamera = new EntityCamera(0,0,0,0,0,0,500);				}				//Tell the stage mediator to depth sort the bubbles on stage				sendNotification(ApplicationFacade.ZSorter, "true");			}					}	}	}