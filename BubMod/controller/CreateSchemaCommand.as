package BubMod.controller {		import flash.display.*;	import BubMod.model.*;	import BubMod.utilities.*;	import BubMod.view.*;	import BubMod.view.components.*;	import org.puremvc.as3.interfaces.ICommand;    import org.puremvc.as3.interfaces.INotification;    import org.puremvc.as3.patterns.command.SimpleCommand;	import flash.xml.*;	import flash.events.*;	import flash.net.*;		public class CreateSchemaCommand extends SimpleCommand implements ICommand {		private var schemaDataProxy:SchemaDataProxy;		//Error message returned to the user		private var errorMsg:String = "";        override public function execute(note:INotification):void {			//Retrieve the required proxys			schemaDataProxy = facade.retrieveProxy( SchemaDataProxy.NAME ) as SchemaDataProxy;			//If an array of entities is sent with the notification, retrieve it			var entitiesArray:Array = note.getBody() as Array;			//Set the bubble locations			//If there is no array in the notification then create a sample array			if (entitiesArray == null)			{				//Firstly create a new array to hole the entities				entitiesArray = new Array();				//Add the sample schema to the dictionary which holds a list of the users schemas				schemaDataProxy.addSchemaToDictionary(0, "Sample");				for (var i:Number=0; i<15; i++){					//Create a new space container in 3D space which will hold the bubble					var spaceObject:SpaceObject = PointsHelper.createRandomObject(2000,3000,5000);					//Create a new entity movieclip and embed the space container					var entityMC:EntityMC = new EntityMC(spaceObject) as EntityMC;					//Create and set the entity name					var entityName:String = "Entity" + i.toString();					entityMC.setName(entityName);										//Create a sample primary key					var pk:Attribute = new Attribute(entityMC.getNextAttributeId());					pk.setAttributeName("primary key");					pk.setPrimaryKey(true);										//Create a sample attribute					var attribute1:Attribute = new Attribute(entityMC.getNextAttributeId());					attribute1.setAttributeName("attribute");					attribute1.setPrimaryKey(false); // + i*4										//Create a sample foreign key					var attribute2:Attribute = new Attribute(entityMC.getNextAttributeId());					attribute2.setAttributeName("foreign key");					attribute2.setPrimaryKey(false);					var foreignKey:ForeignKey = new ForeignKey();					foreignKey.setForeignKeyStatus(true);					//Set the related table and key					foreignKey.setRelatedTable("Entity" + (i+1));					foreignKey.setRelatedKey("foreign key" + (i+1));					foreignKey.setConnectionName("foreign key connection" + i);					attribute2.setForeignKey(foreignKey)										//Add the keys and attributes to the entity movieclip					entityMC.addAttribute(pk);					entityMC.addAttribute(attribute1);					entityMC.addAttribute(attribute2);					//Creat a new 3D bubble and set it's name					var studentEntityInstance:Sphere = new Sphere(entityMC.getName(), entityMC.getAttributes());					studentEntityInstance.name = "Entity" + i;					//Embed the bubble in the entity movieclip					entityMC.targetObject = studentEntityInstance;					//Send the entity out to be created by specifying a mediator and adding it to the stage					sendNotification(ApplicationFacade.CREATE_ENTITY, entityMC)				}			}			else			{							}						//Create a new URL Request to access the php script on the server which			//will update the database			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/retrieveuserschemas.php");			//Set the request type to post			xmlURLReq.method = URLRequestMethod.POST;						//Create the URL Loader which will send the request to the server			//Two event listeners are specified to listen for an IO error and 			//a completion response from the server			var xmlSendLoad:URLLoader = new URLLoader();			//Let the php script know we'll be sending variables			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			//This event will let us know when the server script has finished its operation			xmlSendLoad.addEventListener(Event.COMPLETE, onSchemasRetrieved);			//Event used to handle any IO errors			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);			//schemaDataProxy.setEntitiesArray(entitiesArray);			sendNotification(ApplicationFacade.SCHEMA_CREATED, entitiesArray)		}				//Event fired once the saveSchema php script returns a value		private function onSchemasRetrieved(e:Event):void {			//Parse the result to a URLLoader so it can be used			var loader:URLLoader = URLLoader(e.target);			//Call a function to check if any server error occurred			if (Boolean(checkForServerErrors(loader)))			{				//Get the entitiesValue result from the server and parse				//to an XML object				var xmlData:XML = new XML( loader.data.schemaValues );								//Create an xml list out of the entities node				var schemaList:XMLList = xmlData.Schema;								//Loop through each entity node in the list				for each (var schemaXml:XML in schemaList)				{					var schemaId:String = schemaXml.schemaId.text;					var schemaName:String = schemaXml.schemaName.text;										if (schemaId != null && schemaName != null)					{						//Add the schema to the dictionary which holds a list of the users schemas						schemaDataProxy.addSchemaToDictionary(schemaId as int, schemaName);					}				}			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An error occurred retrieving your schemas. Please try again.");				}			}		}				//This function is user to check if any errors occur server side and if they		//do then it retrieves them		private function checkForServerErrors(loader:URLLoader):Boolean {			//Checks that there is some data returned from the server			if (loader.data.length > 0) {				//Cast the results to a URL Variables object. This splits them into				//their individual variables making them easier to work with				var variables:URLVariables = new URLVariables( loader.data );				//If there is no error message returned from the server then it				//operated correctly and we return true				if (variables.errorMsg == undefined)				{					return true;				}				else				{					//Retrieve the exact error and save it to be output to the user					errorMsg = variables.errorMsg;					return false;				}			}						return false;		}				//Catches any IO Errors - could generally be an issue connecting with the server		private function onIOError(event:IOErrorEvent):void {			sendNotification(ApplicationFacade.SHOW_ALERT, "Error loading URL. Please ensure that your security settings allow scripts from compsoc.nuigalway.ie/~derm116/Boilgeog");		}	}	}