package BubMod.controller {	import org.puremvc.as3.interfaces.ICommand;    import org.puremvc.as3.interfaces.INotification;    import org.puremvc.as3.patterns.command.SimpleCommand;	import BubMod.model.*;	import BubMod.utilities.*;	import BubMod.view.components.*;	import flash.geom.*;	import flash.xml.*;	import flash.events.*;	import flash.net.*;		public class GetSchemaCommand extends SimpleCommand implements ICommand {		//Private Members		private var schemaDataProxy:SchemaDataProxy;		private var entityDataProxy:EntityDataProxy;		private var schemaId:Number;		//Integers used to keep track of when entities and attributes have been saved		private var numOfEntities:int = 0;		private var numOfAttributes:int = 0;		//Error message returned to the user		private var errorMsg:String = "";		//Boolean used to check if an error has occurred before sending subsequent		//requests to the server		private var errorOccurred:Boolean = false;					override public function execute(note:INotification):void { 			//Retrieve the schemaId from the 			schemaId = note.getBody() as Number;			//Reset the error variables			errorMsg = "";			errorOccurred = false;						//Retrieve the required proxys			schemaDataProxy = facade.retrieveProxy( SchemaDataProxy.NAME ) as SchemaDataProxy;			entityDataProxy = facade.retrieveProxy( EntityDataProxy.NAME ) as EntityDataProxy;						//Create the schema variables required to save the schema			var schemaVariables:URLVariables = new URLVariables(); 			schemaVariables.schemaId = schemaId;						//Function which sends save schema request to the server			retrieveSchema(schemaVariables);		}				private function retrieveSchema(schemaVariables:URLVariables) {			//Create a new URL Request to access the php script on the server which			//will update the database			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/retrieveschema.php");			//Add the schemas details to the request			xmlURLReq.data = schemaVariables;			//Set the request type to post			xmlURLReq.method = URLRequestMethod.POST;						//Create the URL Loader which will send the request to the server			//Two event listeners are specified to listen for an IO error and 			//a completion response from the server			var xmlSendLoad:URLLoader = new URLLoader();			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			//This event will let us know when the server script has finished its operation			xmlSendLoad.addEventListener(Event.COMPLETE, onSchemaRetrieved);			//Event used to handle any IO errors			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);		}				private function retrieveEntity(entityVariables:URLVariables) {			//Create a new URL Request to access the php script on the server which			//will update the database			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/retrieveentity.php");			//Add the entities details to the request			xmlURLReq.data = entityVariables;			//Set the request type to post			xmlURLReq.method = URLRequestMethod.POST;						//Create the URL Loader which will send the request to the server			//Two event listeners are specified to listen for an IO error and 			//a completion response from the server			var xmlSendLoad:URLLoader = new URLLoader();			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			//This event will let us know when the server script has finished its operation			xmlSendLoad.addEventListener(Event.COMPLETE, onEntityRetrieved);			//Event used to handle any IO errors			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);		}				//Function which passes an attribute object back to the server to be		//saved to the database		private function retrieveAttribute(attrVariables:URLVariables) {			//Create a new URL Request to access the php script on the server which			//will update the database			var xmlURLReq:URLRequest = new URLRequest("http://compsoc.nuigalway.ie/~derm116/Boilgeog/retrieveattribute.php");			//Add the attributes details to the request			xmlURLReq.data = attrVariables;			//Set the request type to post			xmlURLReq.method = URLRequestMethod.POST;						//Create a new URL Loader to send the request and handle the response from the server			var xmlSendLoad:URLLoader = new URLLoader();			//Let the php script know we'll be sending variables			//xmlSendLoad.dataFormat = URLLoaderDataFormat.VARIABLES;			//This event will let us know when the server script has finished its operation			xmlSendLoad.addEventListener(Event.COMPLETE, onAttributeRetrieved);			//Event used to handle any IO errors			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			xmlSendLoad.load(xmlURLReq);		}				//Event fired once the saveSchema php script returns a value		private function onSchemaRetrieved(e:Event):void {			//Parse the result to a URLLoader so it can be used			var loader:URLLoader = URLLoader(e.target);			//Call a function to check if any server error occurred			if (Boolean(checkForServerErrors(loader)))			{				var entityVariables:URLVariables = new URLVariables(); 				entityVariables.schemaId = schemaId;				//Call the function which will send this info back to the server				retrieveEntity(entityVariables);								//Cast the response from the server to a URL Variable				var variables:URLVariables = new URLVariables( loader.data );								schemaDataProxy.setSchemaName(variables.schemaName);				schemaDataProxy.setSchemaId(variables.schemaId);			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An unexpected error occurred. Please try saving again.");				}			}		}				//Event fired once the saveEntity php script returns a value		private function onEntityRetrieved(e:Event):void {			var loader:URLLoader = URLLoader(e.target);			if (Boolean(checkForServerErrors(loader)))			{				//Get the entitiesValue result from the server and parse				//to an XML object				var xmlData:XML = new XML( loader.data.entityValues );								//Create an xml list out of the entities node				var entityList:XMLList = xmlData.Entity;				//Create a new array to hold the retrieved entities				var entitiesArray:Array = new Array();				//set this integer to store how many entities are been retrieved from the server				//this will be used to calculate when the schema is fully retrieved				numOfEntities = entityList.length;				//Loop through each entity node in the list				for each (var entityXml:XML in entityList)				{					//Create a new space container in 3D space which will hold the bubble					var spaceObject:SpaceObject = PointsHelper.createRandomObject(2000,3000,5000);					//Create a new entity movieclip and embed the space container					var entity:EntityMC = new EntityMC(spaceObject) as EntityMC;					//Creat a new 3D bubble and pull its name from the entities XML					var studentEntityInstance:Sphere = new Sphere(entityXml.entityName.text, null);					studentEntityInstance.name = entityXml.entityName.text;					//Embed the bubble in the entity movieclip					entity.targetObject = studentEntityInstance;					//Add the entity to an array which will be saved in the schema data proxy					entitiesArray.push(entity);					//Create the variables required to retrieve the entities attributes from the server					var attrVariables:URLVariables = new URLVariables(); 					attrVariables.schemaId = schemaId;					attrVariables.entityName = entityXml.entityName.text;					//Call the function which will send this info back to the server					retrieveAttribute(attrVariables);					//Decrement the number of entities which need to be retrieved					numOfEntities--;				}				//If we have some entities, then update the array in the schema data proxy				if (entitiesArray.length > 0)				{					schemaDataProxy.setEntitiesArray(entitiesArray);				}			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An unexpected error occurred. Please try saving again.");				}			}		}				//Event fired once the saveAttribute php script returns a value		private function onAttributeRetrieved(e:Event):void {			var loader:URLLoader = URLLoader(e.target);			if (Boolean(checkForServerErrors(loader)))			{				//Parse the attributeValues result from the server to an XML object				var xmlData:XML = new XML( loader.data.attributeValues );				//Retrieve the attributes entity				var entity:EntityMC = schemaDataProxy.getEntityByName(loader.data.entityName);				//Create a new XML List using the Attribute node				var attributeList:XMLList = xmlData.Attribute;				//Set the number of attributes which are been retrieved from the server				//This will be used to calculate when the schema is fully retrieved				numOfAttributes = attributeList.length;				//Loop through each attribtue node				for each(var attribute:XML in attributeList)				{					//Create a new attribute object and set its id and name					var currAttribute:Attribute = new Attribute(entity.getNextAttributeId());					currAttribute.setAttributeName(attribute.attributeName.text);										//Check if the attribute is a primary key					var xmlPrimaryKey:String = attribute.primaryKey.text;					if (xmlPrimaryKey == "y")					{						currAttribute.setPrimaryKey(true);					}					else					{						currAttribute.setPrimaryKey(false);					}										//Check if the attribute is a foreign key					var xmlForeignKey:String = attribute.foreignKey.isForeignKey.text;					if (xmlForeignKey == "y")					{						//If it is then create a new foreign key object and set						//the related table and key						var foreignKey:ForeignKey = new ForeignKey();						foreignKey.setForeignKeyStatus(true);						foreignKey.setRelatedTable(attribute.foreignKey.relatedTable.text);						foreignKey.setRelatedKey(attribute.foreignKey.relatedKey.text);						currAttribute.setForeignKey(foreignKey);					}					//add the attribute to the entity					entity.addAttribute(currAttribute);					//decrement the integer holding the number of attributes been added					numOfAttributes--;				}				//Check to see if this is the last attribute of the last entity to				//be saved. If it is then the save is complete and we let the user know				if (numOfEntities < 1 && numOfAttributes < 1)				{					sendNotification(ApplicationFacade.SHOW_ALERT, "Schema successfully saved");				}			}			//An error has happened server side so we want to alert the user and stop			//the rest of the save			else			{				//Check if the server script has returned a specific error. If it has				//give this to the user				if (errorMsg.length > 0) {					sendNotification(ApplicationFacade.SHOW_ALERT, errorMsg);				}				//Otherwise output a generic error message				else {					sendNotification(ApplicationFacade.SHOW_ALERT, "An unexpected error occurred. Please try saving again.");				}			}		}				//This function is user to check if any errors occur server side and if they		//do then it retrieves them		private function checkForServerErrors(loader:URLLoader):Boolean {			//Checks that there is some data returned from the server			if (loader.data.length > 0) {				//Cast the results to a URL Variables object. This splits them into				//their individual variables making them easier to work with				var variables:URLVariables = new URLVariables( loader.data );				//If there is no error message returned from the server then it				//operated correctly and we return true				if (variables.errorMsg == undefined)				{					return true;				}				else				{					//If an error has occurred set this to true so we don't send anymore					//requests to the server					errorOccurred = true;					//Retrieve the exact error and save it to be output to the user					errorMsg = variables.errorMsg;					return false;				}			}						errorOccurred = true;			return false;		}				//Catches any IO Errors - could generally be an issue connecting with the server		private function onIOError(event:IOErrorEvent):void {			errorOccurred = true;			sendNotification(ApplicationFacade.SHOW_ALERT, "Error loading URL. Please ensure that your security settings allow scripts from compsoc.nuigalway.ie/~derm116/Boilgeog");		}			}	}