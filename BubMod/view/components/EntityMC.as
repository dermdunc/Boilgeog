package BubMod.view.components {	import flash.display.Sprite;	import fl.controls.*;	import flash.text.*;		public class EntityMC extends Sprite{				private var _depth:Number		private var _needsSorting:Boolean = false;		private var _entityName:String = "";				private var _attributes:Array;		private var _entityId:int = 0;		private var _nextAttributeId:int = 0;				//2D Representation of the entiy		public var expandedTable:Table = null;		//Entity Name Textfield		public var objectName:TextField;		//sphere		public var targetObject:Object;		//space object container		public var spaceObject:SpaceObject;				//Constructors to get and set the depths		public function getDepth():Number		{			return _depth;		}				public function setDepth(n:Number):void		{			_depth = n;		}				//Simply increments and returns an int for the attribute id		//same as an auto-increment key in the db		public function getNextAttributeId():int {			_nextAttributeId++;			return _nextAttributeId;		}				public function getName():String		{			return _entityName;		}				public function setName(entityName:String):void		{			_entityName = entityName;			//Create a new format for the table name			var attrFormat:TextFormat = new TextFormat();			attrFormat.size = 60;			attrFormat.align = TextFormatAlign.CENTER;			//Initialise a new textfield for the table name			objectName = new TextField();		    objectName.wordWrap = true;            objectName.text = entityName;			objectName.width = 300;			objectName.textColor = 0xFFFFFF;			objectName.setTextFormat(attrFormat);		}				//Constructors to get and set the entity id		public function getEntityId():int {			return _entityId;		}				public function setEntityId(entityId:int):void {			_entityId = entityId;		}				//Constructor for entity MC		public function EntityMC(spaceObject:SpaceObject) {			this.spaceObject = spaceObject;			this.objectName = new TextField();		}				//Constructors to get and set the attributes array		public function getAttributes():Array {			return _attributes;	  	}		  	public function setAttributes(attributes:Array):void {			_attributes = attributes;	  	}				//Function which adds a single attribute to the attributes array		public function addAttribute(attribute:Attribute):void {			//If the attributes array is not initialized, create a new one			if (_attributes == null)				_attributes = new Array();							_attributes.push(attribute);		}				//Function which retrieves an attribute based on the attribute id		public function getAttributeById(id:int):Attribute {			if (_attributes != null)			{				//loop through each attribute until the specified one is found				for each (var attr:Attribute in _attributes)				{					if (attr.getAttributeId() == id)					{						return attr;					}				}			}						return null;		}				//Function which removes a specified attribute from the attribute array		public function removeAttribute(attribute:Attribute):void {			//Make sure the attribute array is initialized			if (_attributes != null)			{				//Create a new temp array which will be populated with all the attributes not to be removed				var _tempAttributes:Array = new Array();				//Loop through each attribute and if it is not to be deleted then add it to the temp array				for each (var attr:Attribute in _attributes)				{					if (attr != attribute)					{						_tempAttributes.push(attr);					}				}				//Replace the attributes array with the temp array.				_attributes = _tempAttributes;			}		}	}}